// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTER_H_
#define FLATBUFFERS_GENERATED_MONSTER_H_

#include "flatbuffers/flatbuffers.h"

struct Monster_table;

struct Monster_table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_NAME = 6
  };
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct Monster_tableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(Monster_table::VT_AGE, age, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Monster_table::VT_NAME, name);
  }
  explicit Monster_tableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Monster_tableBuilder &operator=(const Monster_tableBuilder &);
  flatbuffers::Offset<Monster_table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster_table>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster_table> CreateMonster_table(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  Monster_tableBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster_table> CreateMonster_tableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateMonster_table(
      _fbb,
      age,
      name__);
}

inline const Monster_table *GetMonster_table(const void *buf) {
  return flatbuffers::GetRoot<Monster_table>(buf);
}

inline const Monster_table *GetSizePrefixedMonster_table(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Monster_table>(buf);
}

inline bool VerifyMonster_tableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Monster_table>(nullptr);
}

inline bool VerifySizePrefixedMonster_tableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Monster_table>(nullptr);
}

inline void FinishMonster_tableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Monster_table> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMonster_tableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Monster_table> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MONSTER_H_
